# Default values for enterprise-kyverno.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

profile: "prod"

cloudPlatform: ""

licenseKey: ouOA/Zp/0+rS5r3NejN1KwSoIcxQUFOyHDN9GD15yw61TUcJgq9d1gnfhdK4UB15IvE1tnokdfi/vKOvpZfxUbT0AzAfXJqZfXk7gZmzxDIXoCi0NITGLkX5WsUfWT0YqmNu3JdcBCr+WcW+ZpNyJasFRxidf8ub7xbS1W9Q+ezsg5pxmSDVyxZ+bs5dQF40RhsW7+qa/Z2r9/aB3Nv6dGztH4jwuwZG1lL0sHXOsFAPOaKkt2q1cPd2wBZRY2rTzBvNkUimBHn4zVuJpH+Rk4RzQuaPjZFcZvsTARHTNgNkBysHNdBMsFrOas5iHcgE4h9mHU6bjXZ7DPduCQT8hoXMMo/90GGX8kteJKTe8+mIY4waajub+1RIrkPq6+xK

namespace:

replicaCount: 1

envVars: []

image:
  repository: ghcr.io/nirmata/enterprise-kyverno-operator
  # Defaults to chart appVersion
  tag:
  pullPolicy: IfNotPresent
  pullSecrets:
    registry: ghcr.io
    name: image-pull-secret
    create: false
    username: <enter-username>
    password: <enter-password>

rbac:
  create: true
  operatorHasAdminPerms: false
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

enableWebhook: true
# Whether certificate management is done by "cert-manager", "operator", "other"
certManager: operator

# Component configurations
kyverno:
  createCR: true
  enablePolicyExceptions: true
  replicaCount:
  rbac:
    create: true
    serviceAccount:
      create: true
    clusterRole:
      # -- Extra resource permissions to add in the cluster role
      extraResources: []
  templating:
    enabled: false
    image: bitnami/kubectl:latest
  webhooksCleanup:
    enable: false
  crds:
    annotations: []
  cleanupController:
    # -- Enable cleanup controller.
    enabled: true
    rbac:
      # -- Create RBAC resources
      create: true
      serviceAccount:
        create: true
      clusterRole:
        # -- Extra resource permissions to add in the cluster role
        extraResources: []

  # -- Additional resources to be added to kyverno controller RBAC permissions.
  generatecontrollerExtraResources: []
  image:
    # -- Image repository
    repository: ghcr.io/nirmata/kyverno
    # -- Image tag
    tag: v1.9.5-n4k.nirmata.4

  # Kyverno Helm Chart customizations other than those already in kyverno CR
  helm:
    resources:
      # -- Pod resource limits
      limits:
        memory: 1Gi #1Gi


# Items after this are general chart parameters. Set/Modify as per need.
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
  # fsGroup: 2000

securityContext:
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
    - CAP_NET_RAW

# -- Configmap storing custom CA certificate if any
customCAConfigMap:
# -- Path containing ssl certs within the container. Used only if customCAConfigMap is used
systemCertPath: /etc/ssl/certs

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    memory: 256Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
